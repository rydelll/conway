services:
  conway:
    container_name: conway
    image: ${REGISTRY}/${NAMESPACE}/conway:latest
    restart: unless-stopped
    read_only: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    environment:
      - LOG_MODE=${LOG_MODE}
      - LOG_LEVEL=${LOG_LEVEL}
      - DB_SCHEME=${DB_SCHEME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_CONNECT_TIMEOUT=${DB_CONNECT_TIMEOUT}
      - DB_SSLMODE=${DB_SSLMODE}
      - DB_SSLCERT=${DB_SSLCERT}
      - DB_SSLKEY=${DB_SSLKEY}
      - DB_SSLROOTCERT=${DB_SSLROOTCERT}
    networks:
      - frontend
      - backend

  postgres:
    container_name: postgres
    image: postgres:16.3-alpine3.20
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CAP_DAC_OVERRIDE
      - CAP_FOWNER
      - CAP_SETUID
      - CAP_SETGID
    security_opt:
      - no-new-privileges
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - backend
    volumes:
      - postgres:/var/lib/postgresql/data

networks:
  frontend:
    name: frontend
  backend:
    name: backend

volumes:
  postgres:
    name: postgres
